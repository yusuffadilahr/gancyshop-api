// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  password    String
  firstName   String
  lastName    String
  phoneNumber String?
  address     String? @db.Text
  role        Role    @default(USER)

  isUpdatePassword    Boolean?
  tokenUpdatePassword String?  @db.Text

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  products Product[]
  cart     Cart?
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int     @default(0)
  imageUrl    String?
  fileId      String?

  weightGram Int       @default(0)
  isActive   Boolean?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])

  cartItems CartItem[]
}

model Category {
  id                  Int    @id @default(autoincrement())
  categoryName        String
  categoryMotorcyleId Int?

  Product           Product[]
  CategoryMotorcyle CategoryMotorcyle? @relation(fields: [categoryMotorcyleId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CategoryMotorcyle {
  id             Int        @id @default(autoincrement())
  motorCycleName String?
  releaseYear    Int?
  category       Category[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
}

enum Role {
  USER
  ADMIN
}
