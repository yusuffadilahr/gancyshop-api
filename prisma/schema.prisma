generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model cart {
  id         Int  @id @default(autoincrement())
  userId     Int
  productId  Int?
  quantity   Int
  price      Int
  totalPrice Int

  user    user     @relation(fields: [userId], references: [id], map: "Cart_userId_fkey")
  product product? @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@map("cart")
}

model category {
  id                   Int                @id @default(autoincrement())
  categoryName         String
  categoryMotorcycleId Int?
  categorymotorcyle    categorymotorcyle? @relation(fields: [categoryMotorcycleId], references: [id], map: "Category_categoryMotorcycleId_fkey")
  product              product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@index([categoryMotorcycleId], map: "Category_categoryMotorcycleId_fkey")
  @@map("category")
}

model categorymotorcyle {
  id             Int     @id @default(autoincrement())
  motorCycleName String?
  releaseYear    Int?

  category category[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@map("categorymotorcycle")
}

model chatsession {
  id     Int @id @default(autoincrement())
  userId Int

  user            user              @relation(fields: [userId], references: [id], map: "ChatSession_userId_fkey")
  messagecustomer messagecustomer[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@index([userId], map: "ChatSession_userId_fkey")
  @@map("chatsession")
}

model messagecustomer {
  id            Int    @id @default(autoincrement())
  userId        Int
  message       String
  chatSessionId Int?

  role        messagecustomer_role
  chatsession chatsession?         @relation(fields: [chatSessionId], references: [id], map: "MessageCustomer_chatSessionId_fkey")
  user        user                 @relation(fields: [userId], references: [id], map: "MessageCustomer_userId_fkey")

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@index([chatSessionId], map: "MessageCustomer_chatSessionId_fkey")
  @@index([userId], map: "MessageCustomer_userId_fkey")
  @@map("messagecustomer")
}

model product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  imageUrl    String?
  weightGram  Int      @default(0)
  isActive    Boolean?
  ownerId     Int
  fileId      String?
  categoryId  Int

  category category @relation(fields: [categoryId], references: [id], map: "Product_categoryId_fkey")
  cart     cart[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@index([categoryId], map: "Product_categoryId_fkey")
  @@index([ownerId], map: "Product_ownerId_fkey")
  @@map("product")
}

model user {
  id                  Int      @id @default(autoincrement())
  email               String   @unique(map: "User_email_key")
  password            String
  firstName           String
  lastName            String
  phoneNumber         String?
  address             String?  @db.LongText
  isUpdatePassword    Boolean?
  tokenUpdatePassword String?  @db.LongText

  role            user_role         @default(USER)
  cart            cart[]
  chatsession     chatsession[]
  messagecustomer messagecustomer[]
  subscription    subscription[]

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@map("user")
}

model subscription {
  id     Int    @id @default(autoincrement())
  email  String @db.LongText
  userId Int

  user user @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@map("subscription")
}

enum messagecustomer_role {
  USER
  ADMIN
}

enum user_role {
  USER
  ADMIN
}
